// ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: URL –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è Railway hosting
// Railway URL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
const API_BASE = 'https://brokerpilot-stands-server-production.up.railway.app'; // ‚úÖ RAILWAY URL

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
let standSelect, standInfo, standName, standDescription, standNodes, currentTasks, taskCount;
let taskInput, addTaskBtn, refreshBtn, connectionStatus, statusMessage;
let blockBtn, unblockBtn, blockInfo, blockReason, blockDate, addTaskForm;
let blockModal, blockForm, blockReasonInput, cancelBlockBtn, modalStandName;
let moveModal, moveForm, cancelMoveBtn;

// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let stands = [];
let selectedStand = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ popup
document.addEventListener('DOMContentLoaded', init);

async function init() {
    console.log('üöÄ Stands Manager starting...');
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    initializeElements();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    attachEventListeners();
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–Ω–¥–æ–≤
    await loadStands();
}

function initializeElements() {
    standSelect = document.getElementById('standSelect');
    standInfo = document.getElementById('standInfo');
    standName = document.getElementById('standName');
    standDescription = document.getElementById('standDescription');
    standNodes = document.getElementById('standNodes');
    currentTasks = document.getElementById('currentTasks');
    taskCount = document.getElementById('taskCount');
    taskInput = document.getElementById('taskInput');
    addTaskBtn = document.getElementById('addTaskBtn');
    refreshBtn = document.getElementById('refreshBtn');
    connectionStatus = document.getElementById('connectionStatus');
    statusMessage = document.getElementById('statusMessage');
    
    // –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    blockBtn = document.getElementById('blockBtn');
    unblockBtn = document.getElementById('unblockBtn');
    blockInfo = document.getElementById('blockInfo');
    blockReason = document.getElementById('blockReason');
    blockDate = document.getElementById('blockDate');
    addTaskForm = document.getElementById('addTaskForm');
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    blockModal = document.getElementById('blockModal');
    blockForm = document.getElementById('blockForm');
    blockReasonInput = document.getElementById('blockReasonInput');
    cancelBlockBtn = document.getElementById('cancelBlockBtn');
    modalStandName = document.getElementById('modalStandName');
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
    moveModal = document.getElementById('moveModal');
    moveForm = document.getElementById('moveForm');
    cancelMoveBtn = document.getElementById('cancelMoveBtn');
}

function attachEventListeners() {
    // –í—ã–±–æ—Ä —Å—Ç–µ–Ω–¥–∞
    standSelect.addEventListener('change', onStandSelect);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    addTaskBtn.addEventListener('click', addTask);
    taskInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            addTask();
        }
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    refreshBtn.addEventListener('click', () => {
        loadStands(true);
    });
    
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–Ω–¥–∞
    blockBtn.addEventListener('click', openBlockModal);
    unblockBtn.addEventListener('click', unblockStand);
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    blockForm.addEventListener('submit', blockStand);
    cancelBlockBtn.addEventListener('click', closeBlockModal);
    blockModal.addEventListener('click', (e) => {
        if (e.target === blockModal) {
            closeBlockModal();
        }
    });
    
    // –ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏
    taskInput.addEventListener('input', formatTaskInput);
}

function formatTaskInput(e) {
    let value = e.target.value.replace(/[^0-9]/g, ''); // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if (value.length > 0) {
        e.target.value = value;
    }
}

async function loadStands(showRefreshMessage = false) {
    console.log('üì° Loading stands from server...');
    
    try {
        updateConnectionStatus(true, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        
        const response = await fetch(`${API_BASE}/stands`, {
            method: 'GET',
            headers: {
                'Cache-Control': 'no-cache',
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        stands = await response.json();
        console.log('‚úÖ Stands loaded:', stands.length);
        
        updateConnectionStatus(true, '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ');
        populateStandSelect();
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–µ–Ω–¥ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if (selectedStand) {
            const updatedStand = stands.find(s => s.id === selectedStand.id);
            if (updatedStand) {
                selectedStand = updatedStand;
                showStandInfo();
            }
        }
        
        if (showRefreshMessage) {
            showStatus('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
        }
        
    } catch (error) {
        console.error('‚ùå Error loading stands:', error);
        updateConnectionStatus(false, '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        
        let errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        if (error.message.includes('Failed to fetch')) {
            errorMessage = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω';
        }
        
        showStatus(errorMessage, 'error');
        showConnectionHelp();
    }
}

function updateConnectionStatus(connected, message = '') {
    connectionStatus.textContent = connected ? '‚óè' : '‚óè';
    connectionStatus.className = connected ? 'status-indicator' : 'status-indicator offline';
    connectionStatus.title = message || (connected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É' : '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
}

function showConnectionHelp() {
    if (stands.length === 0) {
        standSelect.innerHTML = `
            <option value="">‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</option>
            <option value="" disabled>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∑–∞–ø—É—â–µ–Ω start-server.bat</option>
            <option value="" disabled>IP –∞–¥—Ä–µ—Å –≤ popup.js: ${API_BASE}</option>
        `;
        standSelect.disabled = true;
    }
}

function populateStandSelect() {
    standSelect.disabled = false;
    standSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–Ω–¥...</option>';
    
    stands.forEach(stand => {
        const option = document.createElement('option');
        option.value = stand.id;
        
        let statusText;
        if (stand.blocked) {
            statusText = 'üîí –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù';
            option.classList.add('blocked');
            option.style.background = '#dc3545';
            option.style.color = 'white';
        } else if (stand.tasks.length === 0) {
            statusText = '—Å–≤–æ–±–æ–¥–µ–Ω';
        } else if (stand.tasks.length === 1) {
            statusText = '1 –∑–∞–¥–∞—á–∞';
        } else {
            statusText = `${stand.tasks.length} –∑–∞–¥–∞—á`;
        }
        
        option.textContent = `${stand.name} (${statusText})`;
        standSelect.appendChild(option);
    });
}

function onStandSelect() {
    const standId = standSelect.value;
    
    if (!standId) {
        standInfo.classList.add('hidden');
        selectedStand = null;
        return;
    }
    
    selectedStand = stands.find(s => s.id === standId);
    if (selectedStand) {
        console.log('üìã Selected stand:', selectedStand.name);
        showStandInfo();
    }
}

function showStandInfo() {
    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
    standName.textContent = selectedStand.name;
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
    const taskCountText = selectedStand.tasks.length === 0 ? '0 –∑–∞–¥–∞—á' : 
                         selectedStand.tasks.length === 1 ? '1 –∑–∞–¥–∞—á–∞' : 
                         `${selectedStand.tasks.length} –∑–∞–¥–∞—á`;
    taskCount.textContent = taskCountText;
    
    // –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
    standDescription.textContent = selectedStand.description;
    
    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    if (selectedStand.blocked) {
        blockInfo.classList.remove('hidden');
        blockReason.textContent = `–ü—Ä–∏—á–∏–Ω–∞: ${selectedStand.blockReason}`;
        blockDate.textContent = `–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${new Date(selectedStand.blockDate).toLocaleString('ru-RU')}`;
        blockBtn.classList.add('hidden');
        addTaskForm.style.display = 'none'; // –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    } else {
        blockInfo.classList.add('hidden');
        blockBtn.classList.remove('hidden');
        addTaskForm.style.display = 'flex'; // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–¥—ã
    renderNodes();
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏
    renderTasks();
    
    // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
    taskInput.value = '';
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
    standInfo.classList.remove('hidden');
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ —Å—Ç–µ–Ω–¥ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
    if (!selectedStand.blocked) {
        setTimeout(() => taskInput.focus(), 100);
    }
}

function renderNodes() {
    standNodes.innerHTML = selectedStand.nodes.map(node => 
        `<span class="node-tag">${node}</span>`
    ).join('');
}

function renderTasks() {
    if (selectedStand.tasks.length === 0) {
        currentTasks.innerHTML = '<div class="no-tasks">üì≠ –ó–∞–¥–∞—á –Ω–∞ —Å—Ç–µ–Ω–¥–µ –Ω–µ—Ç</div>';
        return;
    }
    
    currentTasks.innerHTML = selectedStand.tasks.map(task => {
        // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
        const taskData = selectedStand.taskData && selectedStand.taskData[task];
        const assignedTester = taskData ? taskData.tester : '';
        
        return `
            <div class="task-item">
                <span class="task-number">#${task}</span>
                <div class="task-actions">
                    <select class="tester-select" data-task="${task}">
                        <option value="">–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫</option>
                        <option value="–î–µ–Ω–∏—Å" ${assignedTester === '–î–µ–Ω–∏—Å' ? 'selected' : ''}>–î–µ–Ω–∏—Å</option>
                        <option value="–ú–∞—Ç–≤–µ–π" ${assignedTester === '–ú–∞—Ç–≤–µ–π' ? 'selected' : ''}>–ú–∞—Ç–≤–µ–π</option>
                    </select>
                    <button class="complete-task" data-task="${task}" title="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É">‚úì</button>
                    <button class="move-task" data-task="${task}" title="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É">‚ü≤</button>
                </div>
            </div>
        `;
    }).join('');
    
    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    currentTasks.querySelectorAll('.complete-task').forEach(button => {
        button.addEventListener('click', (e) => {
            const taskToComplete = e.target.getAttribute('data-task');
            completeTask(taskToComplete);
        });
    });
    
    currentTasks.querySelectorAll('.move-task').forEach(button => {
        button.addEventListener('click', (e) => {
            const taskToMove = e.target.getAttribute('data-task');
            openMoveModal(taskToMove);
        });
    });
    
    currentTasks.querySelectorAll('.tester-select').forEach(select => {
        select.addEventListener('change', (e) => {
            const task = e.target.getAttribute('data-task');
            const tester = e.target.value;
            updateTaskTester(task, tester);
        });
    });
}

async function addTask() {
    const taskNumber = taskInput.value.trim();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!taskNumber) {
        showStatus('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏', 'error');
        taskInput.focus();
        return;
    }
    
    if (!selectedStand) {
        showStatus('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–Ω–¥', 'error');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç–µ–Ω–¥–∞
    if (selectedStand.blocked) {
        showStatus('–°—Ç–µ–Ω–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ', 'error');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞ —Ç–µ–∫—É—â–µ–º —Å—Ç–µ–Ω–¥–µ
    if (selectedStand.tasks.includes(taskNumber)) {
        showStatus(`–ó–∞–¥–∞—á–∞ #${taskNumber} —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å—Ç–µ–Ω–¥–µ ${selectedStand.name}`, 'error');
        taskInput.focus();
        taskInput.select();
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç–µ–Ω–¥–∞—Ö
    const duplicateStand = stands.find(stand => 
        stand.id !== selectedStand.id && stand.tasks.includes(taskNumber)
    );
    
    if (duplicateStand) {
        alert(`‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ #${taskNumber} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å—Ç–µ–Ω–¥ "${duplicateStand.name}"`);
        taskInput.focus();
        taskInput.select();
        return;
    }
    
    console.log(`‚ûï Adding task #${taskNumber} to ${selectedStand.name}`);
    
    try {
        // –û—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        addTaskBtn.disabled = true;
        addTaskBtn.textContent = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...';
        
        // –õ–æ–∫–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        selectedStand.tasks.push(taskNumber);
        selectedStand.status = 'busy';
        renderTasks();
        updateTaskCount();
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch(`${API_BASE}/stands/${selectedStand.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(selectedStand)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        // –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        console.log(`‚úÖ Task #${taskNumber} added successfully`);
        showStatus(`–ó–∞–¥–∞—á–∞ #${taskNumber} –¥–æ–±–∞–≤–ª–µ–Ω–∞`, 'success');
        
        // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä
        taskInput.value = '';
        populateStandSelect();
        taskInput.focus();
        
    } catch (error) {
        console.error('‚ùå Error adding task:', error);
        
        // –û—Ç–∫–∞—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const taskIndex = selectedStand.tasks.indexOf(taskNumber);
        if (taskIndex > -1) {
            selectedStand.tasks.splice(taskIndex, 1);
            selectedStand.status = selectedStand.tasks.length > 0 ? 'busy' : 'free';
            renderTasks();
            updateTaskCount();
        }
        
        showStatus('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
        
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
        addTaskBtn.disabled = false;
        addTaskBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
    }
}

async function removeTask(taskToRemove) {
    if (!selectedStand) return;
    
    console.log(`‚ûñ Removing task #${taskToRemove} from ${selectedStand.name}`);
    
    try {
        // –õ–æ–∫–∞–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
        const taskIndex = selectedStand.tasks.indexOf(taskToRemove);
        if (taskIndex > -1) {
            selectedStand.tasks.splice(taskIndex, 1);
            renderTasks();
            updateTaskCount();
        }
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch(`${API_BASE}/stands/${selectedStand.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(selectedStand)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        console.log(`‚úÖ Task #${taskToRemove} removed successfully`);
        showStatus(`–ó–∞–¥–∞—á–∞ #${taskToRemove} —É–¥–∞–ª–µ–Ω–∞`, 'success');
        populateStandSelect();
        
    } catch (error) {
        console.error('‚ùå Error removing task:', error);
        
        // –û—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (taskIndex > -1) {
            selectedStand.tasks.splice(taskIndex, 0, taskToRemove);
            renderTasks();
            updateTaskCount();
        }
        
        showStatus('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
    }
}

function updateTaskCount() {
    const taskCountText = selectedStand.tasks.length === 0 ? '0 –∑–∞–¥–∞—á' : 
                         selectedStand.tasks.length === 1 ? '1 –∑–∞–¥–∞—á–∞' : 
                         `${selectedStand.tasks.length} –∑–∞–¥–∞—á`;
    taskCount.textContent = taskCountText;
}

function showStatus(message, type) {
    console.log(`üì¢ Status: ${message} (${type})`);
    
    statusMessage.textContent = message;
    statusMessage.className = `status-message status-${type}`;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        statusMessage.textContent = '';
        statusMessage.className = 'status-message';
    }, 4000);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    if (stands.length > 0) { // –û–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        loadStands();
    }
}, 15000);

// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener('keydown', (e) => {
    // F5 –∏–ª–∏ Ctrl+R - –æ–±–Ω–æ–≤–∏—Ç—å
    if (e.key === 'F5' || (e.ctrlKey && e.key === 'r')) {
        e.preventDefault();
        loadStands(true);
    }
    
    // Esc - –∑–∞–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–µ–Ω–¥–µ –∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    if (e.key === 'Escape') {
        if (!blockModal.classList.contains('hidden')) {
            closeBlockModal();
        } else {
            standSelect.value = '';
            standInfo.classList.add('hidden');
            selectedStand = null;
            standSelect.focus();
        }
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç–µ–Ω–¥–æ–≤
function openBlockModal() {
    if (!selectedStand) return;
    
    modalStandName.textContent = selectedStand.name;
    blockReasonInput.value = '';
    blockModal.classList.remove('hidden');
    blockReasonInput.focus();
}

function closeBlockModal() {
    blockModal.classList.add('hidden');
}

async function blockStand(e) {
    e.preventDefault();
    
    const reason = blockReasonInput.value.trim();
    if (!reason) {
        showStatus('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', 'error');
        return;
    }
    
    if (!selectedStand) return;
    
    console.log(`üîí Blocking stand ${selectedStand.name}: ${reason}`);
    
    try {
        // –õ–æ–∫–∞–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–µ–Ω–¥
        selectedStand.blocked = true;
        selectedStand.blockReason = reason;
        selectedStand.blockDate = new Date().toISOString();
        selectedStand.status = 'blocked';
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch(`${API_BASE}/stands/${selectedStand.id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(selectedStand)
        });
        
        if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        
        console.log(`‚úÖ Stand ${selectedStand.name} blocked successfully`);
        showStatus(`–°—Ç–µ–Ω–¥ ${selectedStand.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`, 'success');
        
        closeBlockModal();
        showStandInfo(); // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        populateStandSelect(); // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤
        
    } catch (error) {
        console.error('‚ùå Error blocking stand:', error);
        
        // –û—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        selectedStand.blocked = false;
        selectedStand.blockReason = '';
        selectedStand.blockDate = '';
        selectedStand.status = 'free';
        
        showStatus('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç–µ–Ω–¥–∞', 'error');
    }
}

async function unblockStand() {
    if (!selectedStand) return;
    
    console.log(`üîì Unblocking stand ${selectedStand.name}`);
    
    try {
        // –õ–æ–∫–∞–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–µ–Ω–¥
        selectedStand.blocked = false;
        selectedStand.blockReason = '';
        selectedStand.blockDate = '';
        selectedStand.status = selectedStand.tasks.length > 0 ? 'busy' : 'free';
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch(`${API_BASE}/stands/${selectedStand.id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(selectedStand)
        });
        
        if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        
        console.log(`‚úÖ Stand ${selectedStand.name} unblocked successfully`);
        showStatus(`–°—Ç–µ–Ω–¥ ${selectedStand.name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`, 'success');
        
        showStandInfo(); // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        populateStandSelect(); // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤
        
    } catch (error) {
        console.error('‚ùå Error unblocking stand:', error);
        
        // –û—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        selectedStand.blocked = true;
        selectedStand.status = 'blocked';
        
        showStatus('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç–µ–Ω–¥–∞', 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async function completeTask(taskToComplete) {
    if (!selectedStand) return;
    
    console.log(`‚úÖ Completing task #${taskToComplete} on ${selectedStand.name}`);
    
    try {
        // –õ–æ–∫–∞–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Ç–µ–∫—É—â–∏—Ö
        const taskIndex = selectedStand.tasks.indexOf(taskToComplete);
        if (taskIndex > -1) {
            selectedStand.tasks.splice(taskIndex, 1);
            renderTasks();
            updateTaskCount();
        }
        
        // –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        const completedTask = {
            id: taskToComplete,
            standId: selectedStand.id,
            standName: selectedStand.name,
            completedDate: new Date().toISOString()
        };
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const [standResponse, completedResponse] = await Promise.all([
            fetch(`${API_BASE}/stands/${selectedStand.id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(selectedStand)
            }),
            fetch(`${API_BASE}/completedTasks`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(completedTask)
            })
        ]);
        
        if (!standResponse.ok || !completedResponse.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        }
        
        console.log(`‚úÖ Task #${taskToComplete} completed successfully`);
        showStatus(`–ó–∞–¥–∞—á–∞ #${taskToComplete} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`, 'success');
        populateStandSelect();
        
    } catch (error) {
        console.error('‚ùå Error completing task:', error);
        
        // –û—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (taskIndex > -1) {
            selectedStand.tasks.splice(taskIndex, 0, taskToComplete);
            renderTasks();
            updateTaskCount();
        }
        
        showStatus('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
async function updateTaskTester(taskId, tester) {
    if (!selectedStand) return;
    
    console.log(`üë§ Updating tester for task #${taskId} to ${tester}`);
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å taskData –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!selectedStand.taskData) {
            selectedStand.taskData = {};
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞
        if (!selectedStand.taskData[taskId]) {
            selectedStand.taskData[taskId] = {};
        }
        selectedStand.taskData[taskId].tester = tester;
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch(`${API_BASE}/stands/${selectedStand.id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(selectedStand)
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        }
        
        console.log(`‚úÖ Tester updated successfully for task #${taskId}`);
        showStatus(`–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ "${tester}" –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É #${taskId}`, 'success');
        
    } catch (error) {
        console.error('‚ùå Error updating tester:', error);
        showStatus('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞', 'error');
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        renderTasks();
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞
function openMoveModal(taskId) {
    const moveModal = document.getElementById('moveModal');
    const moveTaskIdElement = document.getElementById('moveTaskId');
    const moveFromStandElement = document.getElementById('moveFromStand');
    const moveToStandSelect = document.getElementById('moveToStandSelect');
    const moveForm = document.getElementById('moveForm');
    const cancelMoveBtn = document.getElementById('cancelMoveBtn');
    
    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    moveTaskIdElement.textContent = taskId;
    moveFromStandElement.textContent = selectedStand.name;
    
    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤ (–∏—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    moveToStandSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞...</option>';
    stands.forEach(stand => {
        if (stand.id !== selectedStand.id && !stand.blocked) {
            const option = document.createElement('option');
            option.value = stand.id;
            const taskCountText = stand.tasks.length === 0 ? '—Å–≤–æ–±–æ–¥–µ–Ω' : 
                                 stand.tasks.length === 1 ? '1 –∑–∞–¥–∞—á–∞' : 
                                 `${stand.tasks.length} –∑–∞–¥–∞—á`;
            option.textContent = `${stand.name} (${taskCountText})`;
            moveToStandSelect.appendChild(option);
        }
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    moveModal.classList.remove('hidden');
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å taskId –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    moveModal.dataset.taskId = taskId;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
document.addEventListener('DOMContentLoaded', () => {
    const moveModal = document.getElementById('moveModal');
    const moveForm = document.getElementById('moveForm');
    const cancelMoveBtn = document.getElementById('cancelMoveBtn');
    
    if (moveForm) {
        moveForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const taskId = moveModal.dataset.taskId;
            const targetStandId = document.getElementById('moveToStandSelect').value;
            if (taskId && targetStandId) {
                moveTask(taskId, targetStandId);
            }
        });
    }
    
    if (cancelMoveBtn) {
        cancelMoveBtn.addEventListener('click', () => {
            moveModal.classList.add('hidden');
        });
    }
    
    if (moveModal) {
        moveModal.addEventListener('click', (e) => {
            if (e.target === moveModal) {
                moveModal.classList.add('hidden');
            }
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–¥–∞—á–∏
async function moveTask(taskId, targetStandId) {
    const moveModal = document.getElementById('moveModal');
    const targetStand = stands.find(s => s.id === targetStandId);
    
    if (!targetStand) {
        showStatus('–¶–µ–ª–µ–≤–æ–π —Å—Ç–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    console.log(`üîÑ Moving task #${taskId} from ${selectedStand.name} to ${targetStand.name}`);
    
    let taskIndex = -1;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —Å—Ç–µ–Ω–¥–µ
        if (targetStand.tasks.includes(taskId)) {
            alert(`‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ #${taskId} —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å—Ç–µ–Ω–¥–µ "${targetStand.name}"`);
            return;
        }
        
        // –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–º —Å—Ç–µ–Ω–¥–µ
        taskIndex = selectedStand.tasks.indexOf(taskId);
        if (taskIndex === -1) {
            showStatus(`–ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç–µ–Ω–¥–µ ${selectedStand.name}`, 'error');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        let taskData = null;
        if (selectedStand.taskData && selectedStand.taskData[taskId]) {
            taskData = { ...selectedStand.taskData[taskId] }; // —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é
        }
        
        // –°–æ–∑–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–µ–Ω–¥–æ–≤
        const updatedSourceStand = {
            ...selectedStand,
            tasks: selectedStand.tasks.filter(t => t !== taskId),
            taskData: { ...selectedStand.taskData }
        };
        
        // –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞
        if (updatedSourceStand.taskData[taskId]) {
            delete updatedSourceStand.taskData[taskId];
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞
        updatedSourceStand.status = updatedSourceStand.tasks.length === 0 ? 'free' : 'busy';
        
        const updatedTargetStand = {
            ...targetStand,
            tasks: [...targetStand.tasks, taskId],
            taskData: { ...targetStand.taskData },
            status: 'busy'
        };
        
        // –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–µ–Ω–¥
        if (taskData) {
            updatedTargetStand.taskData[taskId] = taskData;
        }
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        console.log('Sending updates to server...');
        const [sourceResponse, targetResponse] = await Promise.all([
            fetch(`${API_BASE}/stands/${selectedStand.id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(updatedSourceStand)
            }),
            fetch(`${API_BASE}/stands/${targetStand.id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(updatedTargetStand)
            })
        ]);
        
        if (!sourceResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞: ${sourceResponse.status}`);
        }
        
        if (!targetResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–µ–Ω–¥–∞: ${targetResponse.status}`);
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        Object.assign(selectedStand, updatedSourceStand);
        Object.assign(targetStand, updatedTargetStand);
        
        console.log(`‚úÖ Task #${taskId} moved successfully`);
        showStatus(`–ó–∞–¥–∞—á–∞ #${taskId} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ —Å—Ç–µ–Ω–¥ "${targetStand.name}"`, 'success');
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        renderTasks();
        updateTaskCount();
        populateStandSelect();
        moveModal.classList.add('hidden');
        
    } catch (error) {
        console.error('‚ùå Error moving task:', error);
        showStatus(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–¥–∞—á–∏: ${error.message}`, 'error');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await loadStands();
    }
}

console.log('üéØ Stands Manager loaded successfully!');
console.log('üì° API Base URL:', API_BASE);
console.log('üí° –ù–µ –∑–∞–±—É–¥—å –∑–∞–º–µ–Ω–∏—Ç—å IP –∞–¥—Ä–µ—Å –≤ —Å—Ç—Ä–æ–∫–µ 3!');
